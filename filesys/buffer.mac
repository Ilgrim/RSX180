;***********************************************************************
;
;   This file is part of SYSFCP, the standard filesystem task of RSX180.
;   Copyright (C) 1985-2020, Hector Peraza.
;
;   This program is free software; you can redistribute it and/or
;   modify it under the terms of the GNU General Public License as
;   published by the Free Software Foundation; either version 2 of
;   the License, or (at your option) any later version.
;
;   This program is distributed in the hope that it will be useful,
;   but WITHOUT ANY WARRANTY; without even the implied warranty of
;   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;   GNU General Public License for more details.
;
;   You should have received a copy of the GNU General Public License
;   along with this program; if not, write to the Free Software
;   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
;
;***********************************************************************

;   File buffer (cache) routines.

	.Z180

	cseg

	include	SYSFCP.INC
	include	BUFFER.INC
	include	FCB.INC
	include	ERRORS.INC
	include	SYSTEM.INC

	public	INIBUF		; initialize buffer pool
	public	RLSBLK		; release block
	public	FLSBLK		; flush block
	public	FLBUFS		; flush all buffers
	public	INVBFS		; invalidate buffers
	public	GETBLK		; get block
	public	NEWBLK		; get new block
	public	GETFCB		; get new FCB
	public	FREFCB		; free FCB

	extrn	RDBLK,WRBLK,CLRMEM,CPHLDE

KCALL	MACRO	addr
	call	SWSTK
	dw	addr
	ENDM

STBUF	equ	0		; statically allocated

;-----------------------------------------------------------------------

; Initialize buffer system. Called by the initialization code.

INIBUF:
	IF	STBUF

	ld	hl,BUFS
	ld	(BUFFER),hl

	ELSE

	ld	hl,(BUFFER)
	ld	a,h
	or	l
	jr	nz,inib0	; skip if buffer pool already allocated
	ld	bc,NBUFF * BUFSZ
	KCALL	$ALLOC
	ret	c
	ld	(BUFFER),hl
inib0:

	ENDIF

	push	hl
	ld	bc,NBUFF*BUFSZ
	call	CLRMEM
	pop	de
	ld	b,NBUFF
	dec	b
	ret	z		; return if single buffer
inib1:	ld	hl,BUFSZ
	add	hl,de
	ex	de,hl
	ld	(hl),e		; chain buffers in a single-linked list
	inc	hl
	ld	(hl),d
	djnz	inib1
	ld	hl,HIT
	ld	bc,8
	call	CLRMEM		; clear hit and miss counters
	xor	a		; last buffer has B.LNK cleared by CLRMEM above
	ret

;-----------------------------------------------------------------------

; Release a block. The contents will be eventually saved to the disk.
; HL = buffer address.

RLSBLK:	ld	a,h
	or	l
	ret	z
	ld	de,B.ACCS
	add	hl,de
	dec	(hl)		; decrement access count
	xor	a
	ret

;-----------------------------------------------------------------------

; Flush block. HL = buffer address. On error, returns CY set and error
; code in A.

FLSBLK:	ld	a,h
	or	l
	ret	z
	push	hl
	ex	(sp),ix
	bit	BS.VAL,(ix+B.ST); buffer contains valid data?
	jr	z,fls1		; return with CY clear if not (nothing to do)
	bit	BS.MOD,(ix+B.ST); modified flag set?
	jr	z,fls2		; return with CY clear if not (nothing to do)
	ld	de,B.DATA
	add	hl,de		; get address of data area into HL
	ld	c,(ix+B.BLKNO)	; get block number into BC
	ld	b,(ix+B.BLKNO+1)
	ld	e,(ix+B.DEV)	; get device name into DE
	ld	d,(ix+B.DEV+1)
	ld	a,(ix+B.UNIT)	; and unit number into A
	call	WRBLK		; write block
	jr	c,fls1		; return error if the buffer could not be saved
fls1:	res	BS.MOD,(ix+B.ST); clear modified flag (here with no CY)
fls2:	pop	ix
	ret

;-----------------------------------------------------------------------

; Flush all buffers.

FLBUFS:	ld	hl,(BUFFER)
flb1:	push	hl
	call	FLSBLK		; TODO: handle errors
	pop	hl
	ld	a,(hl)
	inc	hl
	ld	h,(hl)
	ld	l,a
	or	h
	jr	nz,flb1
	ret

;-----------------------------------------------------------------------

; Invalidate all buffers for the given device, assumes FLBUFS has been
; called. Preserves DE-C.

INVBFS:	push	ix
	ld	ix,(BUFFER)
invb1:	ld	a,(ix+B.DEV)
	cp	e		; same device?
	jr	nz,invb2
	ld	a,(ix+B.DEV+1)
	cp	d
	jr	nz,invb2
	ld	a,(ix+B.UNIT)
	cp	c		; same unit?
	jr	nz,invb2
	res	BS.VAL,(ix+B.ST); invalidate buffer
invb2:	ld	l,(ix+B.LNK)
	ld	h,(ix+B.LNK+1)
	push	hl
	pop	ix
	ld	a,h
	or	l
	jr	nz,invb1
	pop	ix
	xor	a
	ret

;-----------------------------------------------------------------------

; Try to find an allocated buffer with the same block number (in HL)
; and device (DE-C). If no allocated buffer if found, then a new one
; is allocated ans assigned to the block. The new buffer is moved to
; the head of the LRU list. On success (CY clear) returns the buffer
; address in IX. Preserves HL, DE-C. Used internally only.

FNDBUF:	ld	ix,BUFFER	; get pointer to head of list
	push	ix		; push prev ptr
	push	hl		; save blkno
	ld	l,(ix)		; get address of first buffer in list
	ld	h,(ix+1)
	ex	(sp),hl		; push buffer address, pop blkno
	pop	ix		; get buffer address into IX
fnd1:	bit	BS.VAL,(ix+B.ST); valid buffer?
	jr	z,fnd2		; skip if not
	ld	a,(ix+B.DEV)
	cp	e		; same device?
	jr	nz,fnd2		; skip if not
	ld	a,(ix+B.DEV+1)
	cp	d
	jr	nz,fnd2
	ld	a,(ix+B.UNIT)
	cp	c		; same unit?
	jr	nz,fnd2		; skip if not
	ld	a,(ix+B.BLKNO)
	cp	l		; same block number?
	jr	nz,fnd2		; skip if not
	ld	a,(ix+B.BLKNO+1)
	cp	h
	jr	nz,fnd2
	push	hl
	ld	hl,HIT
	call	inc32
	pop	hl
	jr	fnd4		; else return it
fnd2:	ex	(sp),hl		; push blkno, pop prev ptr
	push	hl		; push prev ptr again
	ld	l,(ix+B.LNK)
	ld	h,(ix+B.LNK+1)
	ld	a,h
	or	l		; last buffer in list?
	jr	z,fnd3		; exit loop if yes to reallocate it
	inc	sp		; drop old prev ptr
	inc	sp
	ex	(sp),hl		; push next, pop blkno
	ex	(sp),ix		; pop next, push prev
	jr	fnd1		; loop to process next buffer

fnd3:	push	hl
	ld	hl,MISS
	call	inc32
	pop	hl
	ld	a,(ix+B.ACCS)
	or	a		; block in use?
	scf
	ld	a,E.NOBUF
	jr	nz,fnd5		; return error if yes
	push	de
	push	bc
	push	ix
	pop	hl
	call	FLSBLK		; flush any old data
	pop	bc
	pop	de
	jr	c,fnd5		; on error, return
	pop	hl		; pop prev ptr
	ex	(sp),hl		; pop blkno, push prev ptr
	ld	(ix+B.BLKNO),l	; assign new block number to buffer
	ld	(ix+B.BLKNO+1),h
	ld	(ix+B.DEV),e	; set device name
	ld	(ix+B.DEV+1),d
	ld	(ix+B.UNIT),c	; and unit number
	res	BS.VAL,(ix+B.ST); clear valid flag
	res	BS.MOD,(ix+B.ST); clear modified flag
fnd4:	inc	(ix+B.ACCS)	; increment access count
	ex	(sp),hl		; push blkno, pop prev ptr
	ld	a,(ix+B.LNK)	; unlink the buffer
	ld	(hl),a
	inc	hl
	ld	a,(ix+B.LNK+1)
	ld	(hl),a
	ld	hl,(BUFFER)
	ld	(ix+B.LNK),l	; and make it the new head of the list
	ld	(ix+B.LNK+1),h
	ld	(BUFFER),ix
	pop	hl		; restore blkno
	xor	a		; return success
	ret

fnd5:	pop	hl		; drop prev ptr
	pop	hl		; restore blkno
	ret			; return CY and error code in A

inc32:	inc	(hl)
	ret	nz
	inc	hl
	inc	(hl)
	ret	nz
	inc	hl
	inc	(hl)
	ret	nz
	inc	hl
	inc	(hl)
	ret

;-----------------------------------------------------------------------

; Get an existing disk block (read it from disk).
; On input DE-C = device and unit, HL = blkno, returns HL = buffer.
; On error CY is set, error code is in A, and HL is set to zero.

GETBLK:	push	ix
	call	FNDBUF		; get buffer
	jr	c,gblk3		; on error, return
	bit	BS.VAL,(ix+B.ST); valid buffer?
	jr	nz,gblk1	; return it if yes
	ld	a,c		; device name in DE-A
	ld	c,l		; block number in BC
	ld	b,h
	push	ix
	pop	hl
	push	de
	ld	de,B.DATA
	add	hl,de		; address of data area into HL
	pop	de
	call	RDBLK		; load block into buffer
	jr	c,gblk2		; on error, return
	set	BS.VAL,(ix+B.ST); set valid flag
gblk1:	push	ix
	pop	hl		; return buffer address in HL
	xor	a		; return success
	pop	ix
	ret

gblk2:	dec	(ix+B.ACCS)	; release buffer
gblk3:	pop	ix
	ld	hl,0
	ret

;-----------------------------------------------------------------------

; Get a new block (zeroed).
; On input DE-C = device and unit, HL = new blkno, returns HL = buffer.
; On error CY is set, error code is in A, and HL is set to zero.

NEWBLK:	push	ix
	call	FNDBUF		; get buffer
	ld	hl,0
	jr	c,nblk1		; on error, return
	push	ix
	pop	hl
	ld	de,B.DATA
	add	hl,de
	ld	bc,BLKSZ
	call	CLRMEM
	set	BS.VAL,(ix+B.ST); set valid flag
	set	BS.MOD,(ix+B.ST); set modified flag
	push	ix
	pop	hl		; return buffer address in HL
	xor	a		; clear CY
nblk1:	pop	ix
	ret

;-----------------------------------------------------------------------

; Get a new FCB. Returns FCB address in HL or CY set if no kernel
; memory could be allocated.

GETFCB:	di
	ld	bc,FCBSZ
	KCALL	$ALLOC
	jr	c,gfcb1
	push	hl
	ld	bc,FCBSZ
	call	CLRMEM
	pop	hl
	push	ix
	ld	ix,$FCBS	; link new FCB at head position
	ld	a,(ix)
	ld	(hl),a		; set link field in new element
	inc	hl
	ld	a,(ix+1)
	ld	(hl),a
	dec	hl
	ld	(ix),l		; set new list head
	ld	(ix+1),h
	pop	ix
gfcb1:	ei
	ret

;-----------------------------------------------------------------------

; Free the FCB. Assumes the file has been closed.

FREFCB:	push	ix
	di
	ld	ix,$FCBS
ffcb1:	ld	e,(ix)
	ld	d,(ix+1)
	ld	a,d
	or	e
	jr	z,ffcb2		; error, item not found in list (!!!)
	call	CPHLDE
	jr	z,ffcb3		; item found, unlink it
	push	de
	pop	ix
	jr	ffcb1

ffcb2:	pop	ix
	scf
	ei
	ret

ffcb3:	ld	a,(de)
	ld	(ix),a		; unlink FCB
	inc	de
	ld	a,(de)
	ld	(ix+1),a
	ld	de,FCBSZ
	KCALL	$FREE		; release memory
	pop	ix
	ei
	ret

;-----------------------------------------------------------------------

	dseg

  IF	0
HIT:	ds	4
MISS:	ds	4
  ELSE
HIT	equ	0080h
MISS	equ	HIT+4
  ENDIF

	IF	STBUF

BUFS:	ds	NBUFF * BUFSZ

	ENDIF

	end
