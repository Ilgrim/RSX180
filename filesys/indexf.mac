;***********************************************************************
;
;   This file is part of SYSFCP, the standard filesystem task of RSX180.
;   Copyright (C) 1985-2020, Hector Peraza.
;
;   This program is free software; you can redistribute it and/or
;   modify it under the terms of the GNU General Public License as
;   published by the Free Software Foundation; either version 2 of
;   the License, or (at your option) any later version.
;
;   This program is distributed in the hope that it will be useful,
;   but WITHOUT ANY WARRANTY; without even the implied warranty of
;   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;   GNU General Public License for more details.
;
;   You should have received a copy of the GNU General Public License
;   along with this program; if not, write to the Free Software
;   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
;
;***********************************************************************

;   Index file I/O routines.

	.z80

	cseg

	include	VCB.INC
	include	BUFFER.INC
	include	ERRORS.INC

	public	NEWINO		; get new inode
	public	RDINOD		; read inode
	public	WRINOD		; write inode

	extrn	FNDMNT,GETBLK,RLSBLK,CPHLDE

;-----------------------------------------------------------------------

; Read inode. DE = device UCB address, HL = dest buffer, BC = inode
; number (1-based).

RDINOD:	ld	(ucbadr),de	; remember UCB address
	ld	(ubuf),hl
	push	bc
	call	FNDMNT		; get VCB address
	pop	bc
	ret	c		; on error, return

	push	hl
	ex	(sp),iy		; get volume control block into IY

	ld	l,(iy+M.IXFB)	; get first block of index file into HL
	ld	h,(iy+M.IXFB+1)
	ld	(ixsblk),hl
	ld	a,h
	or	l
	ld	a,E.DEVNM	; 'device not mounted' error
	scf
	jr	z,rdi1		; return error if no index file block is set

	ld	l,(iy+M.IXNB)	; get number of index file blocks
	ld	h,(iy+M.IXNB+1)
	ld	(ixnbls),hl
	ld	a,h
	or	l
	ld	a,E.DEVNM	; 'device not mounted' error
	scf
	jr	z,rdi1		; return error if no index file block is set

	call	GETINO		; load index file block
	jr	c,rdi1

	ld	de,(ubuf)
	ld	bc,32
	ldir

	ld	hl,(buf)
	call	RLSBLK
	xor	a		; return success
rdi1:	pop	iy
	ret

;-----------------------------------------------------------------------

; Write inode. DE = device UCB address, HL = src buffer, BC = inode
; number (1-based).

WRINOD:	ld	(ucbadr),de	; remember UCB address
	ld	(ubuf),hl
	push	bc
	call	FNDMNT		; get VCB address
	pop	bc
	ret	c		; on error, return

	push	hl
	ex	(sp),iy		; get volume control block into IY

	ld	l,(iy+M.IXFB)	; get first block of index file into HL
	ld	h,(iy+M.IXFB+1)
	ld	(ixsblk),hl
	ld	a,h
	or	l
	ld	a,E.DEVNM	; 'device not mounted' error
	scf
	jr	z,wri1		; return error if no index file block is set

	ld	l,(iy+M.IXNB)	; get number of index file blocks
	ld	h,(iy+M.IXNB+1)
	ld	(ixnbls),hl
	ld	a,h
	or	l
	ld	a,E.DEVNM	; 'device not mounted' error
	scf
	jr	z,wri1		; return error if no index file block is set

	call	GETINO		; load index file block
	jr	c,wri1

	ex	de,hl
	ld	hl,(ubuf)
	ld	bc,32
	ldir

	ld	hl,(buf)
	push	hl
	ld	bc,B.ST
	add	hl,bc
	set	BS.MOD,(hl)	; set modified flag
	pop	hl
	call	RLSBLK
	xor	a		; return success
wri1:	pop	iy
	ret

;-----------------------------------------------------------------------

; Ensure inode number in BC is within allowed range (1..MAXF), compute
; block number and offset of index file where the inode is located and
; load the corresponding index file block.

GETINO:	ld	a,b
	or	c
	ld	a,E.IDXE
	scf
	ret	z
	ld	l,c
	ld	h,b
	dec	hl		; make inode number 0-based
	add	hl,hl
	rla
	add	hl,hl
	rla
	add	hl,hl
	rla
	add	hl,hl
	rla
	ld	e,h
	and	0Fh
	ld	d,a		; DE = inode / 16 = relative block number
	ld	h,0
	add	hl,hl		; HL = offset = (inode % 16) * 32
	ld	c,l		; remember offset
	ld	b,h
	ld	hl,(ixnbls)	; get number of blocks in index file
	call	CPHLDE		; CY if HL (nblks) > DE (blkno)
	ccf
	ld	a,E.IDXE
	ret	c		; return if outside range
	ld	hl,(ixsblk)
	add	hl,de		; obtain absolute block number
	push	bc		; push byte offset
	ld	de,(ucbadr)
	call	GETBLK		; load block
	pop	de		; pop byte offset
	ret	c
	ld	(buf),hl
	ld	bc,B.DATA
	add	hl,bc		; point to data area
	add	hl,de		; index into buffer, point to inode
	xor	a		; return success
	ret

;-----------------------------------------------------------------------

; Find a free inode in index file, DE = device UCB address.
; Return its 1-based number in HL and old seqno in BC.

NEWINO:	ld	(ucbadr),de	; remember UCB address
	call	FNDMNT
	ret	c

	push	ix
	push	hl
	ex	(sp),iy		; get volume control block into IY

	ld	l,(iy+M.IXFB)	; get first block of index file into HL
	ld	h,(iy+M.IXFB+1)
	ld	(ixsblk),hl
	ld	a,h
	or	l
	ld	a,E.DEVNM	; 'device not mounted' error
	scf
	jr	z,nwi1		; return error if no index file block is set

	ld	l,(iy+M.IXNB)	; get number of index file blocks
	ld	h,(iy+M.IXNB+1)
	ld	(ixnbls),hl
	ld	a,h
	or	l
	ld	a,E.DEVNM	; 'device not mounted' error
	scf
	jr	z,nwi1		; return error if no index file block is set

	ld	ix,1		; IX = inode count

	ld	hl,(ixsblk)
nwi4:	ld	de,(ucbadr)
	push	bc
	call	GETBLK		; load block of index file
	pop	bc
	jr	c,nwi1
	ld	(buf),hl
	ld	de,B.DATA
	add	hl,de		; point to data area

	ld	b,16		; inodes per block

nwi3:	ld	e,(hl)
	inc	hl
	ld	d,(hl)
	dec	hl
	ld	a,d
	or	e		; free entry?
	jr	z,nwi2		; return it if yes

	ld	de,32		; inode size
	add	hl,de		; point to next inode
	inc	ix
	djnz	nwi3		; loop until all processed

	ld	hl,(buf)
	call	RLSBLK		; release this block

	ld	hl,(ixnbls)
	dec	hl
	ld	(ixnbls),hl
	ld	a,h
	or	l		; all blocks processed?
	ld	a,E.IDXF
	scf
	jr	z,nwi1		; return error if yes - index file full

	ld	hl,(ixsblk)
	inc	hl
	ld	(ixsblk),hl	; else try next block
	jr	nwi4

nwi2:	inc	hl
	inc	hl
	inc	hl
	inc	hl
	ld	c,(hl)		; fetch old seq number
	inc	hl
	ld	b,(hl)
	push	bc
	ld	hl,(buf)
	call	RLSBLK		; release block
	pop	bc
	push	ix
	pop	hl		; return inode number in HL
	xor	a		; success
nwi1:	pop	iy
	pop	ix
	ret

;-----------------------------------------------------------------------

	dseg

ucbadr:	ds	2	; current device name and unit

ixsblk:	ds	2	; index file file starting block number
ixnbls:	ds	2	; number of blocks in index file
buf:	ds	2	; buffer address returned by GETBLK
ubuf:	ds	2	; caller's buffer address

	end
