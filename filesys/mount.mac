;***********************************************************************
;
;   This file is part of SYSFCP, the standard filesystem task of RSX180.
;   Copyright (C) 1985-2020, Hector Peraza.
;
;   This program is free software; you can redistribute it and/or
;   modify it under the terms of the GNU General Public License as
;   published by the Free Software Foundation; either version 2 of
;   the License, or (at your option) any later version.
;
;   This program is distributed in the hope that it will be useful,
;   but WITHOUT ANY WARRANTY; without even the implied warranty of
;   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;   GNU General Public License for more details.
;
;   You should have received a copy of the GNU General Public License
;   along with this program; if not, write to the Free Software
;   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
;
;***********************************************************************

;   Volume handling.

	.Z80

	include	VCB.INC
	include	BUFFER.INC
	include	FCB.INC
	include	DCB.INC
	include	ERRORS.INC
	include	SYSCONF.INC
	include	SYSTEM.INC

	cseg

	public	MOUNT		; mount volume
	public	DISMNT		; dismount volume
	public	FNDVCB		; find device in mounted volume list
	public	GETFCB		; get new FCB
	public	FREFCB		; free FCB

	extrn	FCLOSE,V2LBN,GETBLK,RLSBLK,FLBUFS,INVBFS
	extrn	FILUCB,CLRMEM,CPHLDE

KCALL	MACRO	addr
	call	$SWSTK
	dw	addr
	ENDM

; TODO:
; - allow mounting R/O

;-----------------------------------------------------------------------

; Mount volume.

MOUNT:	ld	hl,(FILUCB)	; get UCB address
	push	hl
	pop	ix		; get UCB address into IX
	bit	DV.MNT,(ix+U.CW); mountable?
	ld	a,E.BADOP	; TODO: 'device not mountable' error
	scf
	ret	z

	ex	de,hl
	call	FNDVCB		; device already mounted?
	jr	c,newm		; branch if not

	bit	US.DMO,(ix+U.ST); unit being dismounted?
	ld	a,E.DEVAM
	scf
	ret	z		; error if not: device already mounted

	res	US.DMO,(ix+U.ST); else re-mount it
	xor	a		; and return success
	ret

newm:	push	de
	call	NEWVCB		; allocate new VCB (zeroed!)
	pop	de
	ret	c		; return on error (code already in A)

	ld	(vcbadr),hl	; save VCB address
	inc	hl
	inc	hl
	ld	(hl),e		; store UCB address
	inc	hl
	ld	(hl),d

  IF 0
	ld	hl,($CTCB)
	di
	ld	(ix+U.ACP),l	; register with unit as ACP
	ld	(ix+U.ACP+1),h
	ei
  ENDIF

	ld	hl,1		; block 1 = volume ID, UCB address still in DE
	call	GETBLK		; read the volume ID block
	jp	c,err2

	ld	(buf),hl	; save pointer to buffer
	ld	de,B.DATA
	add	hl,de		; point to data area
	push	hl

	ld	de,vid
	ld	b,6
mnt1:	ld	a,(de)		; check the volume identifier
	cp	(hl)
	jp	nz,badv
	inc	hl
	inc	de
	djnz	mnt1

	pop	de
	ld	hl,8
	add	hl,de
	ld	a,(hl)
	inc	hl
	ld	h,(hl)
	ld	l,a
	ld	(fver),hl
	ld	a,h		; check version
	cp	FVER.H
	jp	nz,badv1
	ld	a,l
	cp	FVER.L
	jr	z,mnt2
	cp	FVER.L-1
	jp	nz,badv1

mnt2:	ld	hl,16
	add	hl,de
	push	de		; get the volume label
	push	hl
	ld	hl,(vcbadr)
	ld	de,M.LABEL
	add	hl,de
	ex	de,hl
	pop	hl
	ld	bc,16
	ldir			; copy the volume label
	pop	de

	ld	iy,(vcbadr)

	ld	hl,36
	add	hl,de
	ld	c,(hl)
	inc	hl
	ld	b,(hl)		; get the default file protection bits
	ld	(iy+M.DFPR),c
	ld	(iy+M.DFPR+1),b

	ld	hl,32
	add	hl,de
	ld	c,(hl)
	inc	hl
	ld	b,(hl)		; get number of blocks for device
	ld	(iy+M.NBLKS),c
	ld	(iy+M.NBLKS+1),b

	ld	hl,64
	add	hl,de
	ld	c,(hl)
	inc	hl
	ld	b,(hl)		; get the index file block number
	ld	(iy+M.IXFB),c
	ld	(iy+M.IXFB+1),b

	ld	hl,68
	add	hl,de
	ld	c,(hl)
	inc	hl
	ld	b,(hl)		; get the bitmap file block number
	ld	(iy+M.BMFB),c
	ld	(iy+M.BMFB+1),b

	ld	hl,(buf)
	call	RLSBLK		; release the volume ID buffer

	ld	l,(iy+M.IXFB)
	ld	h,(iy+M.IXFB+1)
	ld	e,(iy+M.UCB)
	ld	d,(iy+M.UCB+1)
	call	GETBLK		; read the first block of the index file
	jp	c,err2

	ld	(buf),hl	; save pointer to buffer
	ld	de,B.DATA
	add	hl,de		; point to data area
	ex	de,hl

	ld	hl,IE.ALOC
	add	hl,de
	ld	c,(hl)
	inc	hl
	ld	b,(hl)		; get size of index file in blocks
	ld	(iy+M.IXNB),c
	ld	(iy+M.IXNB+1),b

	ld	hl,1
	ld	(iy+M.FFIX),l	; reset cached first free index file entry
	ld	(iy+M.FFIX+1),h

	ld	hl,5		; master directory file ID
	ld	a,(fver)
	cp	FVER.L
	jr	z,mnt3
	dec	hl

mnt3:	ld	(mdfid),hl
	dec	hl
	add	hl,hl
	add	hl,hl
	add	hl,hl
	add	hl,hl
	add	hl,hl		; *32
	add	hl,de
	ld	(mdino),hl	; remember inode of master directory

	; open the master directory
	; we cannot call FOPEN/MFOPEN at this point,
	; so we use known values and hope they are OK

	ld	hl,(vcbadr)
	call	GETFCB		; get a new FCB for the master directory
	jp	c,err1		; on error, abort operation
	ld	(iy+M.MFCB),e	; save master directory FCB address in VCB
	ld	(iy+M.MFCB+1),d

	push	de
	pop	ix		; get FCB address into IX

	call	imdfcb		; init master dir FCB (dev, name, ext fields)

	ld	hl,(mdino)
	ld	a,(hl)
	ld	(ix+F.LCNT),a	; setup link count field
	inc	hl
	ld	a,(hl)
	ld	(ix+F.LCNT+1),a	; setup link count field
	inc	hl
	ld	a,(hl)
	or	FA.RD OR FA.WR OR FA.SHR
	ld	(ix+F.ATTR),a	; setup attrib field
	inc	hl		; skip reserved byte
	inc	hl
	ld	a,(hl)
	ld	(ix+F.SEQNO),a	; setup sequence number field
	inc	hl
	ld	a,(hl)
	ld	(ix+F.SEQNO+1),a
	inc	hl
	ld	a,(hl)
	ld	(ix+F.USER),a	; setup user field
	inc	hl
	ld	a,(hl)
	ld	(ix+F.GROUP),a	; setup group field
	inc	hl
	ld	a,(hl)
	ld	(ix+F.STABL),a	; setup starting block field
	inc	hl
	ld	a,(hl)
	ld	(ix+F.STABL+1),a
	inc	hl
	ld	a,(hl)
	ld	(ix+F.NALOC),a	; setup number of alloc blocks
	inc	hl
	ld	a,(hl)
	ld	(ix+F.NALOC+1),a
	inc	hl
	ld	a,(hl)
	ld	(ix+F.NUSED),a	; setup number of used blocks
	inc	hl
	ld	a,(hl)
	ld	(ix+F.NUSED+1),a
	inc	hl
	ld	a,(hl)
	ld	(ix+F.LBCNT),a	; setup last block byte count field
	inc	hl
	ld	a,(hl)
	ld	(ix+F.LBCNT+1),a
	inc	hl
	ld	bc,IE.PROT-IE.TCRE
	add	hl,bc
	ld	a,(hl)
	ld	(ix+F.PROT),a	; setup protection bits
	inc	hl
	ld	a,(hl)
	ld	(ix+F.PROT+1),a

	ld	hl,(mdfid)
	ld	(ix+F.INODE),l	; setup inode field
	ld	(ix+F.INODE+1),h

	ld	hl,(buf)
	call	RLSBLK		; release the buffer (index file block)

	ld	hl,0
	ld	(ix+F.CAVBN),l
	ld	(ix+F.CAVBN+1),h

	ld	l,(ix+F.STABL)
	ld	h,(ix+F.STABL+1)
	ld	(ix+F.CALBN),l
	ld	(ix+F.CALBN+1),h

	ld	ix,(FILUCB)	; get UCB address back into IX
	set	US.MNT,(ix+U.ST); set mounted bit in status word
	set	US.PUB,(ix+U.ST)
	xor	a		; return success
	ret

badv:	pop	hl
badv1:	ld	a,E.BADVT
err1:	push	af
	ld	hl,(buf)
	call	RLSBLK
	pop	af
err2:	push	af
	ld	iy,(vcbadr)
	ld	e,(iy+M.UCB)
	ld	d,(iy+M.UCB+1)
	call	INVBFS		; invalidate all buffers for this device
	push	iy
	pop	hl
	call	FREVCB		; free the VCB
	xor	a
	di
	ld	(ix+U.ACP),a	; unregister from unit
	ld	(ix+U.ACP+1),a
	ei
	pop	af
	scf
	ret

; Setup FCB for master directory access

imdfcb:	ld	l,(iy+M.UCB)
	ld	h,(iy+M.UCB+1)
	ld	(ix+F.UCB),l	; set UCB address
	ld	(ix+F.UCB+1),h
	ld	hl,mdname
	ld	b,9
	push	ix
ini1:	ld	a,(hl)
	ld	(ix+F.DIR),a	; directory and filename are the same
	ld	(ix+F.NAME),a
	inc	hl
	inc	ix
	djnz	ini1
	pop	ix
	ld	b,3
	push	ix
ini2:	ld	a,(hl)
	ld	(ix+F.EXT),a	; set extension
	inc	hl
	inc	ix
	djnz	ini2
	pop	ix
	ld	hl,1
	ld	(ix+F.VER),l	; version 1
	ld	(ix+F.VER+1),h
	ret

vid:	db	'VOL180'
mdname:	db	'MASTER   DIR'

;-----------------------------------------------------------------------

; Dismount volume.

DISMNT:	ld	de,(FILUCB)	; get UCB address into DE
	call	FNDVCB		; device mounted?
	ret	c		; return error if not (code already in A)
	push	hl
	pop	iy		; get VCB address into IY

	push	de		; push UCB address
	call	CHKOPN		; are files still open on volume?
	jr	z,dsm1		; proceed to dismount if not
	pop	ix

	bit	US.DMO,(ix+U.ST); unit being dismounted?
	ld	a,E.DMOP	; error code = dismount in progress
	scf
	ret	nz		; return error if yes
	set	US.DMO,(ix+U.ST); else flag volume as being dismounted
	ld	a,E.DMOI	; error code = dismount initiated
	scf
	ret

dsm1:	ld	l,(iy+M.MFCB)
	ld	h,(iy+M.MFCB+1)
	ld	a,h
	or	l
	call	nz,FCLOSE	; close master directory file and release FCB
	call	FLBUFS		; flush all buffers
	pop	de		; restore UCB address
	call	INVBFS		; invalidate all buffers for this device
	ld	ix,(FILUCB)	; get UCB address back into IX
	res	US.MNT,(ix+U.ST); clear mounted bit in status word
	res	US.DMO,(ix+U.ST); clear also 'dismount in progress' bit
	xor	a
	di
	ld	(ix+U.ACP),a	; clear U.ACP pointer
	ld	(ix+U.ACP+1),a
	ei
	push	iy
	pop	hl
	call	FREVCB		; free the VCB
	ret

; Check for open files. Called with IY = VCB address.

CHKOPN:	ld	e,(iy+M.MFCB)	; get FCB address of master directory into DE
	ld	d,(iy+M.MFCB+1)
	ld	l,(iy+M.FCBL)	; get FCB listhead
	ld	h,(iy+M.FCBL+1)
chk1:	ld	a,h
	or	l		; end of list?
	ret	z		; return Z if yes, no files open
	call	CPHLDE		; is this the master directory FCB?
	ret	nz		; return NZ if not, files are open
	ld	a,(hl)
	inc	hl
	ld	h,(hl)
	ld	l,a
	jr	chk1		; else process next FCB in list

;-----------------------------------------------------------------------

; Allocate a new, zeroed mounted volume control block.
;
; Returns:
;   HL = address of new VCB
;   CY set if no kernel memory could be allocated.

NEWVCB:	ld	bc,MNTSZ
	KCALL	$ALLOC
	ret	c		; error code already in A
	push	hl
	ld	bc,MNTSZ
	call	CLRMEM
	pop	hl
	ld	ix,$MVTBL	; link new entry at the head of the list
	di			; disable ints for e.g. DCU task
	ld	a,(ix)
	ld	(hl),a		; set link field in new entry
	inc	hl
	ld	a,(ix+1)
	ld	(hl),a
	dec	hl
	ld	(ix),l		; set new list head
	ld	(ix+1),h
	ei
	xor	a
	ret

; Free the mounted volume control block. Assumes the device has been
; dismounted.
;
; Input:
;   HL = VCB address
; Returns:
;   CY set on failure and error code in A.

FREVCB:	push	ix
	ld	ix,$MVTBL
frem1:	ld	e,(ix)
	ld	d,(ix+1)
	ld	a,d
	or	e
	jr	z,frem2		; error, item not found in list (!!!)
	call	CPHLDE
	jr	z,frem3		; item found, unlink it
	push	de
	pop	ix
	jr	frem1

frem2:	pop	ix
	ld	a,E.BADOP
	scf
	ret

frem3:	di
	ld	a,(de)
	ld	(ix),a		; unlink item
	inc	de
	ld	a,(de)
	ld	(ix+1),a
	ei
	ld	de,MNTSZ
	KCALL	$FREE		; release memory
	pop	ix
	xor	a
	ret

;-----------------------------------------------------------------------

; Find the specified physical device in the mounted volume list.
;
; Input:
;   DE = UCB address
; Returns:
;   HL = VCB address
;   CY set if not found and error code in A
; Preserves BC, DE, IX and IY.

FNDVCB:	ld	hl,($MVTBL)
fmnt1:	ld	a,h
	or	l		; end of list?
	ld	a,E.DEVNM
	scf
	ret	z		; return with error if yes
	push	hl
	inc	hl
	inc	hl		; point to M.UCB field
	ld	a,(hl)
	cp	e
	jr	nz,fmnt2
	inc	hl
	ld	a,(hl)
	cp	d
	jr	nz,fmnt2
	pop	hl		; found
	or	a
	ret
fmnt2:	pop	hl
	ld	a,(hl)
	inc	hl
	ld	h,(hl)
	ld	l,a
	jr	fmnt1

;-----------------------------------------------------------------------

; Allocate new, zeroed FCB.
;
; Input:
;   HL = VCB address
; Returns:
;   DE = FCB address
;   CY set if no kernel memory could be allocated.

GETFCB:	push	hl
	ld	bc,FCBSZ
	KCALL	$ALLOC
	pop	de
	ret	c
	push	hl
	ld	bc,FCBSZ
	call	CLRMEM
	pop	hl
	ex	de,hl		; DE = FCB address, HL = VCB address
	ld	bc,M.FCBL
	add	hl,bc		; point to FCB list
	di
	ld	a,(hl)		; add FCB to head of list
	ld	(de),a		; set link field in new FCB
	inc	hl
	inc	de
	ld	a,(hl)
	ld	(de),a
	dec	de
	ld	(hl),d		; set new list head
	dec	hl
	ld	(hl),e
	ei
	ret

;-----------------------------------------------------------------------

; Free the FCB. Assumes the file has been closed.
;
; Input:
;   DE = FCB address

FREFCB:	ld	hl,F.UCB
	add	hl,de
	push	de
	ld	e,(hl)		; get UCB address into DE
	inc	hl
	ld	d,(hl)
	call	FNDVCB		; find VCB
	pop	de
	ret	c		; on error, return
	ld	bc,M.FCBL
	add	hl,bc		; point to head of FCB list
ffcb1:	ld	c,l		; save prev ptr
	ld	b,h
	ld	a,(hl)		; get address of FCB
	inc	hl
	ld	h,(hl)
	ld	l,a
	or	h		; end of list?
	scf
	ret	z		; return error if yes
	call	CPHLDE		; is this the FCB?
	jr	nz,ffcb1	; loop if not to try next
	di
	ld	a,(de)
	ld	(bc),a		; unlink the FCB
	inc	de
	inc	bc
	ld	a,(de)
	ld	(bc),a
	ei
	ld	de,FCBSZ
	KCALL	$FREE		; release FCB memory
	ld	ix,(FILUCB)
	bit	US.DMO,(ix+U.ST); unit being dismounted?
	ret	z		; return if not
	call	DISMNT		; else attempt to dismount it
	ret	c		; not dismounted yet
  IF 0
	...notify system console via TKTN or COT?
  ENDIF
	ret

;-----------------------------------------------------------------------

	dseg

fver:	ds	2		; filesystem version
mdfid:	ds	2		; master directory file ID
mdino:	ds	2		; pointer to inode of master directory
vcbadr:	ds	2		; pointer to VCB of mounted volume
buf:	ds	2		; pointer to volume ID buffer

	end
