;***********************************************************************
;
;   This file is part of RMD, a Resource Monitoring Display utility
;   for the RSX180 OS. Copyright (C) 1985-2019, Hector Peraza.
;
;   This program is free software; you can redistribute it and/or
;   modify it under the terms of the GNU General Public License as
;   published by the Free Software Foundation; either version 2 of
;   the License, or (at your option) any later version.
;
;   This program is distributed in the hope that it will be useful,
;   but WITHOUT ANY WARRANTY; without even the implied warranty of
;   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;   GNU General Public License for more details.
;
;   You should have received a copy of the GNU General Public License
;   along with this program; if not, write to the Free Software
;   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
;
;***********************************************************************

;   Task Header Display

	.Z80

	include	RMD.INC
	include	SYSTEM.INC
	include	TCB.INC
	include	FCB.INC
	include	DCB.INC

	public	THDRPG

	extrn	VPUTC,VPUTS,VPUTN,VXY,VGETXY,VAHEX,VHLHEX
	extrn	VADEC,VHLDEC,VCLEOL,VCLEOS,VRPAD,HEADER
	extrn	SKIPBL,STRCMP,UCASE

	cseg

;-----------------------------------------------------------------------

THDRPG:	dw	dproc		; address of display procedure
	dw	setup		; address of setup procedure
	dw	hlptxt		; address of help text

; This is the task header display procedure. It is called with a code
; in register A:
;   0 means redraw everything
;   1 means draw only what has changed from the previous call

dproc:	push	af
	call	HEADER
	pop	af

	or	a		; check redraw flag
	jr	nz,m0

	call	thdr
m0:	call	updtsk		; update task display
	ret

;-----------------------------------------------------------------------

; Process setup command @DE

setup:	call	SKIPBL
	ld	hl,hlptxt
	ld	b,4
	call	STRCMP		; is it TASK?
	scf
	ret	nz		; return if not
	call	SKIPBL
	ld	a,(de)
	cp	'='		; '=' must follow
	scf
	ret	nz
	inc	de
	ld	hl,tsknam
	ld	b,6
s0:	ld	a,(de)
	call	UCASE
	cp	' '
	jr	c,s1
	ld	(hl),a
	inc	hl
	inc	de
	djnz	s0
	ret
s1:	ld	(hl),' '
	inc	hl
	djnz	s1
	xor	a
	ret

;-----------------------------------------------------------------------

; Help text to add to the setup command page

hlptxt:	db	"TASK=t      display task header for task 't'",CR,LF
	db	0

;-----------------------------------------------------------------------

; Display heading

thdr:	ld	hl,hdr
	;jp	hloop
th1:	ld	d,(hl)		; X
	inc	hl
	ld	e,(hl)		; Y
	inc	hl
	inc	de
	ld	a,d
	or	e
	ret	z
	dec	de
	ex	de,hl
	call	VXY
	ex	de,hl
	call	VPUTS
	inc	hl
	jr	th1

hdr:	db	0,3,'Task:',0
	db	14,3,'Partition:',0
	db	33,3,'Status:',0

	db	1,4,'Own:',0
	db	14,4,'I/O:',0
	db	25,4,'Dpri:',0
	db	36,4,'Pri:',0
	db	46,4,'Eflg:',0

	db	0,6,'AF = ',0
	db	11,6,'BC = ',0
	db	22,6,'DE = ',0
	db	33,6,'HL = ',0
	db	44,6,'IX = ',0
	db	55,6,'IY = ',0

	db	0,7,'AF''= ',0
	db	11,7,'BC''= ',0
	db	22,7,'DE''= ',0
	db	33,7,'HL''= ',0
	db	44,7,'PC = ',0
	db	55,7,'SP = ',0

	db	0,9,'LUN',0
	db	0,10,'---',0

	db	4,9,'File',0
	db	4,10,'----',0

	db	33,9,'LUN',0
	db	33,10,'---',0

	db	37,9,'File',0
	db	37,10,'----',0

	dw	0FFFFh

stxy:	db	25,3,6
	db	6,4,6
	db	19,4,5
	db	31,4,4
	db	41,4,4
	db	52,4,8

regxy:	db	5,6
	db	16,6
	db	27,6
	db	38,6
	db	49,6
	db	60,6

	db	5,7
	db	16,7
	db	27,7
	db	38,7
	db	49,7
	db	60,7

lunxy:	db	0,11
	db	0,12
	db	0,13
	db	0,14
	db	0,15
	db	0,16
	db	0,17
	db	0,18

	db	33,11	; 40,...
	db	33,12
	db	33,13
	db	33,14
	db	33,15
	db	33,16
	db	33,17
	db	33,18

;-----------------------------------------------------------------------

; Update task display

updtsk:	ld	a,(tsknam)
	cp	' '
	ld	hl,ntsmsg
	jr	z,upd2

	VGTOXY	6,3

	ld	hl,tsknam
	ld	b,6
	call	VPUTN		; show task name

	ld	ix,(tlist)

upd1:	call	cmpnam		; compare task name with user-given name
	jr	z,found

	ld	l,(ix+T.TCBL)
	ld	h,(ix+T.TCBL+1)
	push	hl
	pop	ix
	ld	a,h
	or	l
	jr	nz,upd1

	; Task not found

	ld	hl,tnfmsg

upd2:	push	hl
	ld	hl,regxy
	ld	b,12
upd3:	ld	d,(hl)		; X
	inc	hl
	ld	e,(hl)		; Y
	inc	hl
	ex	de,hl
	call	VXY
	ex	de,hl
	ld	c,' '		; clear register fields
	call	VPUTC
	call	VPUTC
	call	VPUTC
	call	VPUTC
	djnz	upd3

	ld	hl,stxy
	ld	b,6
upd31:	ld	d,(hl)		; X
	inc	hl
	ld	e,(hl)		; Y
	inc	hl
	ex	de,hl
	call	VXY
	ex	de,hl
	push	bc
	ld	c,' '		; clear fields
	ld	b,(hl)
	inc	hl
upd32:	call	VPUTC
	djnz	upd32
	pop	bc
	djnz	upd31
	VGTOXY	41,3
	call	VCLEOL		; clear status field

  IF 0
	ld	hl,lunxy
	ld	b,16
upd4:	ld	d,(hl)		; X
	inc	hl
	ld	e,(hl)		; Y
	inc	hl
	ex	de,hl
	call	VXY
	ex	de,hl
	ld	e,33
	ld	c,' '		; clear LUN fields
upd5:	call	VPUTC
	dec	e
	jr	nz,upd5
	djnz	upd4
  ELSE
	VGTOXY	0,11
	call	VCLEOS
  ENDIF
	pop	hl

upd6:	push	hl
	VGTOXY	0,1
	pop	hl
	call	VPUTS
	call	VCLEOL
	ret

found:	call	shwtsk		; show task details
	ld	hl,nulmsg
	jr	nc,upd6
	ld	hl,timsg
	jr	upd2

ntsmsg:	db	'No task specified',0
tnfmsg:	db	'Task not in system',0
timsg:	db	'Task inactive or out of memory'
nulmsg:	db	0

; Compare task names

cmpnam:	push	ix
	pop	hl
	ld	de,T.NAME
	add	hl,de
	ld	de,tsknam
	ld	b,6
tcmp:	ld	a,(de)
	cp	(hl)
	ret	nz
	inc	hl
	inc	de
	djnz	tcmp
	ret

; Show task info

shwtsk:	ld	a,(ix+T.NAME)
	cp	'*'		; IDLE task?
	scf
	ret	z		; skip it

	VGTOXY	41,3
	ld	d,(ix+T.ST)
	ld	hl,stat
	bit	TS.ACT,d
	call	nz,tbits
	ld	d,(ix+T.ATTR)
	ld	hl,attr
	call	tbits
	call	VCLEOL

	bit	TS.ACT,(ix+T.ST); task active?
	scf
	ret	z		; skip it if not

	VGTOXY	6,4
	ld	c,(ix+T.CON)
	call	VPUTC
	ld	c,(ix+T.CON+1)
	call	VPUTC
	ld	d,8		; starting X coord in D
	ld	a,(ix+T.CON+2)
	call	VADEC
	ld	c,':'
	call	VPUTC
	ld	e,6		; field size
	call	VRPAD		; pad with spaces

	VGTOXY	19,4
	ld	d,19		; starting X coord in D
	ld	a,(ix+T.IOC)
	call	VADEC
	ld	e,5		; field size
	call	VRPAD		; pad with spaces

	VGTOXY	41,4
	ld	d,41		; starting X coord in D
	ld	a,(ix+T.PRI)
	call	VADEC
	ld	e,5		; field size
	call	VRPAD		; pad with spaces

	VGTOXY	31,4
	ld	d,31		; starting X coord in D
	ld	a,(ix+T.DPRI)
	call	VADEC
	ld	e,5		; field size
	call	VRPAD		; pad with spaces

	VGTOXY	52,4
	ld	a,(ix+T.FLGS)
	call	VAHEX
	ld	a,(ix+T.FLGS+1)
	call	VAHEX
	ld	a,(ix+T.FLGS+2)
	call	VAHEX
	ld	a,(ix+T.FLGS+3)
	call	VAHEX

	call	regs
	call	luns

	xor	a
	ret

tbits:	ld	b,8
	ld	e,01h
t1:	ld	a,d
	and	e
	jr	z,t2
	ld	a,(hl)
	inc	hl
	or	a
	jr	z,t3
	dec	hl
	push	bc
	ld	b,3
	call	VPUTN
	pop	bc
	ld	c,' '
	call	VPUTC
	call	VPUTC
	jr	t3
t2:	ld	a,(hl)
	inc	hl
	or	a
	jr	z,t3
	inc	hl
	inc	hl
t3:	rl	e
	djnz	t1
	ret

luns:	ld	b,0
lun1:	ld	l,(ix+T.LUNT)
	ld	h,(ix+T.LUNT+1)
	ld	e,b
	ld	d,0
	add	hl,de
	add	hl,de
	add	hl,de
	add	hl,de
	ld	e,(hl)		; get UCB into DE
	inc	hl
	ld	d,(hl)
	inc	hl
	ld	a,(hl)		; get FCB into HL
	inc	hl
	ld	h,(hl)
	ld	l,a
	call	lunfil		; display LUN info
	inc	b
	ld	a,b
	cp	16
	jr	nz,lun1
	ret

lunfil:	ld	a,d		; LUN assigned?
	or	e
	jp	z,lf2		; return if not
	push	hl
	push	de
	ld	hl,lunxy
	ld	e,b
	ld	d,0
	add	hl,de
	add	hl,de
	ld	d,(hl)		; X
	inc	hl
	ld	e,(hl)		; Y
	ex	de,hl
	call	VXY		; position cursor
	ex	de,hl
	ld	a,b
	inc	a
	call	VADEC		; display LUN number
	ld	e,4		; field size, old X still in D
	call	VRPAD		; pad with spaces
	pop	de
	pop	hl
	ld	a,h
	or	l		; file open on LUN?
	jr	z,lf1		; jump if not

	push	hl
	pop	iy
	ld	c,(iy+F.DEV)	; display device name
	call	VPUTC
	ld	c,(iy+F.DEV+1)
	call	VPUTC
	ld	a,(iy+F.UNIT)
	call	VADEC
	ld	c,':'
	call	VPUTC
	ld	c,'['
	call	VPUTC
	ex	de,hl
	ld	hl,F.DIR
	add	hl,de
	push	bc
	ld	b,9
	call	fname
	ld	c,']'
	call	VPUTC
	ld	hl,F.NAME
	add	hl,de
	ld	b,9
	call	fname
	ld	c,'.'
	call	VPUTC
	ld	hl,F.EXT
	add	hl,de
	ld	b,3
	call	fname
	pop	bc
	ld	c,';'
	call	VPUTC
	ld	l,(iy+F.VER)
	ld	h,(iy+F.VER+1)
	xor	a
	call	VHLDEC
	jr	lf2

lf1:	ld	hl,U.UNIT
	add	hl,de
	ld	a,(hl)		; get unit number
	push	af
	ld	hl,U.DCB
	add	hl,de
	ld	e,(hl)		; get DCB address
	inc	hl
	ld	d,(hl)
	ld	hl,D.NAME
	add	hl,de
	ld	c,(hl)		; display device name
	call	VPUTC
	inc	hl
	ld	c,(hl)
	call	VPUTC
	pop	af
	call	VADEC		; display unit number
	ld	c,':'
	call	VPUTC
lf2:	ld	d,0
	ld	e,33
	call	VRPAD
	ret

fname:	ld	a,(hl)
	cp	' '
	ret	z
	ld	c,a
	call	VPUTC
	inc	hl
	djnz	fname
	ret

regs:	di
	ld	iy,regbuf
	ld	e,(ix+T.SP)	; src = base of stack frame
	ld	d,(ix+T.SP+1)
	ld	hl,22		; adjust SP value
	add	hl,de		;  to reflect state before reg push
	ld	(iy+0),l	; store SP first
	ld	(iy+1),h
	ex	de,hl
	ld	e,(ix+T.BANK)
	inc	iy
	inc	iy
	ld	a,11		; copy the remaining 11 registers
getrg:	call	UGETWB		; get value from task space
	ld	(iy+0),c	; store in buffer
	ld	(iy+1),b
	inc	iy
	inc	iy
	dec	a
	jr	nz,getrg
	ei

	push	ix
	ld	ix,regofs
	ld	hl,regxy
	ld	b,12
r1:	ld	e,(ix)		; get offset to value in buffer
	ld	d,0
	ld	iy,regbuf
	add	iy,de
	ld	d,(hl)		; X
	inc	hl
	ld	e,(hl)
	inc	hl
	ex	de,hl
	call	VXY
	ld	l,(iy)		; get reg pair value
	ld	h,(iy+1)
	call	VHLHEX
	ex	de,hl
	inc	ix
	djnz	r1
	pop	ix
	ret

stat:	db	0,'STP','IOW','WTD','AST','SUP','OUT',0
attr:	db	'PRV','REM',0,'FIX','MCR',0,0,0

;-----------------------------------------------------------------------

	dseg

tsknam:	db	'...PIP'

regbuf:	ds	24
regofs:	db	12,10,8,6,4,2
	db	20,18,16,14,22,0

	end
