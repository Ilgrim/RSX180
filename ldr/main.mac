;**********************************************************************;
;                                                                      ;
;   This file is part of RSX180, a multi-tasking OS for the Z180.      ;
;   Copyright (C) 1985-2019, Hector Peraza.                            ;
;                                                                      ;
;   This program is free software; you can redistribute it and/or      ;
;   modify it under the terms of the GNU General Public License as     ;
;   published by the Free Software Foundation; either version 2 of     ;
;   the License, or (at your option) any later version.                ;
;                                                                      ;
;   This program is distributed in the hope that it will be useful,    ;
;   but WITHOUT ANY WARRANTY; without even the implied warranty of     ;
;   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the      ;
;   GNU General Public License for more details.                       ;
;                                                                      ;
;   You should have received a copy of the GNU General Public License  ;
;   along with this program; if not, write to the Free Software        ;
;   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.          ;
;                                                                      ;
;**********************************************************************;

;----------------------------------------------------------------------;
;                                                                      ;
;       LOADER task. Runs in a separate partition.                     ;
;                                                                      ;
;----------------------------------------------------------------------;

	.Z80

	include	SYSFN.INC
	include	SYSTEM.INC
	include	ERRORS.INC
	include	QIO.INC
	include	TCB.INC
	include	PCB.INC
	include	THDR.INC
	include	TKN.INC

LUN	equ	1		; LUN for file I/O
EFN	equ	9		; event flag number for file I/O

	public	LOADER

KCALL	MACRO	addr
	call	SWSTK
	dw	addr
	ENDM

;-----------------------------------------------------------------------

	cseg

LOADER:	ld	sp,stack

	ld	c,1
	SC	.SUPER		; we always run in kernel mode
	jr	c,exit

next:	ld	iy,($CTCB)
	ld	l,(iy+T.RCVL)	; check loader queue
	ld	h,(iy+T.RCVL+1)
	ld	a,h
	or	l		; got anything?
	jr	z,wait		; jump if not

	push	hl
	pop	ix		; else get TCB address into IX
	ld	a,(ix+T.LNK)
	ld	(iy+T.RCVL),a	; unlink TCB
	ld	a,(ix+T.LNK+1)
	ld	(iy+T.RCVL+1),a
	call	TLOAD		; and load the task
	jr	next		; loop for more

wait:	SC	.WTDAT		; wait until something arrives
	jr	next		; then loop to process it
				; (this task never terminates)

exit:	ld	hl,EX.SEV
	SC	.EXIT

;-----------------------------------------------------------------------

; Process kernel task load request.

; Load the requested task image from disk and then call the kernel to 
; start execution. Task for memory has been already allocated. Aborts
; task if it could not be loaded.
; Input:
;   IX = TCB addr
; Returns:
;   CY set on error and error code in A.

TLOAD:	ld	e,(ix+T.LIB)	; get task load device into DE-C
	ld	d,(ix+T.LIB+1)
	ld	c,(ix+T.LIB+2)

	ld	b,LUN
	SC	.ALUN		; assign LUN to task's load device

	ld	l,(ix+T.SBLK)	; get starting block number
	ld	h,(ix+T.SBLK+1)
	ld	(QIOBLK+Q.BLK),hl ; set block number in QIO block
	ld	l,(ix+T.SBLK+2)
	ld	h,(ix+T.SBLK+3)
	ld	(QIOBLK+Q.BLK+2),hl

	call	DSKRD		; read 1st block (task header) into IOBUF
	ld	e,TK.LDR	; abort code = read error
	jp	c,lderr		; abort task on error

	ld	hl,IOBUF
	ld	de,TSKHDR
	ld	bc,256
	ldir

	call	CHKHDR		; perform some checks
	ld	e,TK.ITH	; abort code = invalid task header
	jp	c,lderr		; abort task if header is invalid

	ld	l,(ix+T.PCB)
	ld	h,(ix+T.PCB+1)
	ld	de,P.BASE
	add	hl,de
	ld	a,(hl)
	ld	(TBASE),a

	ld	de,100h		; program load address
	ld	b,(ix+T.NBLK)	; number of blocks to read in B
				;  kernel made sure that high byte is zero
	ld	hl,IOBUF+256	; src in HL, dst in DE
	push	bc		; save block counter
	ld	bc,256		; length
	di
	exx
;;	ld	hl,($CPCB)
;;	ld	de,P.BASE
;;	add	hl,de
;;	ld	e,(hl)		; src bank
	ld	a,(USRBBR)
	ld	e,a		; src bank
	ld	a,(TBASE)
	ld	d,a		; dst bank
	exx
	call	$MCOPY		; copy 1st 256 bytes 
	ei
	pop	bc
	dec	b		; done with first block
	jr	z,ldend

load:	call	NXTBL		; already copied first (half) block
	push	bc
	push	de
	call	DSKRD
	pop	de		; dst
	jp	c,rderr		; abort task on error
	ld	hl,IOBUF	; src
	ld	bc,512		; len
	di
	exx
;;	ld	hl,($CPCB)
;;	ld	de,P.BASE
;;	add	hl,de
;;	ld	e,(hl)		; src bank
	ld	a,(USRBBR)
	ld	e,a		; src bank
	ld	a,(TBASE)
	ld	d,a		; dst bank
	exx
	call	$MCOPY		; copy block to task area
	ei
	pop	bc
	djnz	load

ldend:	call	INILUN		; initialize LUN table
	ld	e,TK.MEM	; abort code = not enough pool
	jr	c,lderr		; abort task on error

	KCALL	TGO		; move task to ready list to start execution
	ret	nc
	ld	e,TK.RUN	; tktn code = start failed.

; Free allocated task memory in case of start failure.

lderr:	push	af
	push	ix
	pop	bc
	KCALL	TKILL		; abort task
	pop	af
	ret

rderr:	pop	bc
	ld	e,TK.LDR	; abort code = read error
	jr	lderr

;-----------------------------------------------------------------------

; Validate task header. Right now it simply checks signature and
; version number.

CHKHDR:	ld	hl,TSKHDR
	ld	de,thid
	ld	b,6
ckhdr:	ld	a,(de)		; check task header ID
	cp	(hl)
	ld	a,E.BADTH
	scf
	ret	nz		; return CY if header is invalid
	inc	hl
	inc	de
	djnz	ckhdr
	ld	hl,(TSKHDR+TH.VER)
	ld	de,0102h	; 1.2
	or	a
	sbc	hl,de
	ret	z
	scf
	ret

thid:	db	'TSK180'

;-----------------------------------------------------------------------

; Initialize task LUN table.

INILUN:	ld	l,(ix+T.CTX)	; get address of task context block
	ld	h,(ix+T.CTX+1)
	ld	a,h
	or	l
	scf
	ret	z		; error if not set
	ld	hl,TSKHDR+TH.LUNT
	ld	b,1
ini1:	ld	e,(hl)		; get device name into DE-C
	inc	hl
	ld	d,(hl)
	inc	hl
	ld	c,(hl)
	inc	hl
	inc	hl
	push	hl
	push	bc
	KCALL	$ALUN
	pop	bc
	pop	hl
	inc	b
	ld	a,b
	cp	17
	jr	c,ini1
	xor	a
	ret

;-----------------------------------------------------------------------

; Read disk block (number already in QIO block) into buffer IOBUF.

DSKRD:	ld	hl,0
	ld	(QIOSB+2),hl	; clear count of bytes read
	ld	hl,QIOBLK
	SC	.QIO		; .QIOW
	ret	c		; if queueing failed
	ld	hl,(QIOSB+2)	; fetch byte count
	ld	a,(QIOSB)	; fetch return code
	or	a		; check result
	ret	z
	scf
	ret

; Set next block number in QIO block

NXTBL:	ld	hl,QIOBLK+Q.BLK
	inc	(hl)
	ret	nz
	inc	hl
	inc	(hl)
	ret	nz
	inc	hl
	inc	(hl)
	ret	nz
	inc	hl
	inc	(hl)
	ret

;-----------------------------------------------------------------------

	dseg

TSKHDR:	ds	256		; buffer for task header
IOBUF:	ds	512		; buffer for file I/O
TBASE:	ds	1		; task base page

QIOBLK:	QIOW$	IO.RLB,LUN,EFN,QIOSB,<IOBUF,512,0,0,0>
QIOSB:	ds	4

RCVBUF:	ds	2		; receive buffer

	ds	128		; stack space
stack	equ	$

	end
