;**********************************************************************;
;                                                                      ;
;   This file is part of RSX180, a multi-tasking OS for the Z180.      ;
;   Copyright (C) 1985-2019, Hector Peraza.                            ;
;                                                                      ;
;   This program is free software; you can redistribute it and/or      ;
;   modify it under the terms of the GNU General Public License as     ;
;   published by the Free Software Foundation; either version 2 of     ;
;   the License, or (at your option) any later version.                ;
;                                                                      ;
;   This program is distributed in the hope that it will be useful,    ;
;   but WITHOUT ANY WARRANTY; without even the implied warranty of     ;
;   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the      ;
;   GNU General Public License for more details.                       ;
;                                                                      ;
;   You should have received a copy of the GNU General Public License  ;
;   along with this program; if not, write to the Free Software        ;
;   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.          ;
;                                                                      ;
;**********************************************************************;

	.Z180

; Note: compile with ZSM4 (M80 reverses chars in 'CO' etc.)

Z80182	equ	1
	include	Z180.INC
	include	DCB.INC
	include	TCB.INC
	include	PCB.INC
	include	SYSFN.INC

	include	SYSCONF.INC

	extrn	SYSEND,SYSTOP,POOL,POOLSZ

	extrn	SYSSTK,MMUINI,INITKM,ININT,SETVEC,INTON,INTOFF
	extrn	TMRINT,DLOAD,ASSIGN,TSTART,HOSTNM,SYSENT,SYSLVL
	extrn	KSIZE,CLRMEM,UPTIME,NVREAD,LDRTCB,TKNTCB,NEWPCB
	extrn	FNDPAR,PHYDEV,TRQST,TFIX,GO

	extrn	INIT_S,INIT_E
;;	extrn	FSRV_S,FSRV_E

	cseg

;-----------------------------------------------------------------------

; This is the main System Startup routine.
; Initializes everything and starts a few essential tasks before
; passing control to the dispatcher.

START::	di
	ld	sp,SYSSTK	; use SYSSTK in common memory

  IF 0	; HALT disables the internal Z182 DMA by default, which stalls disk
	; I/O.  In some early/buggy Z182 chips (like the one my P112 has)
	; the ENH182 register cannot be accessed or is not implemented at
	; all, and therefore DMA can't be enabled on HALT.  Thus, the
	; dipatcher will use a loop instead of a HALT instruction to wait
	; for an interrupt when there are no tasks ready.

	in0	a,(enh182)
	set	5,a
	out0	(enh182),a
  ENDIF

	ld	a,0F0h
	out0	(CBAR),a	; bank 0000-EFFF, common F000-FFFF
	in0	a,(BBR)
	out0	(CBR),a

	ld	hl,(POOLSZ)
	ld	a,h
	or	l
	jp	z,uncfg

	ld	hl,0
	ld	bc,128
	call	CLRMEM		; clear RST vector area

	ld	a,-1
	ld	(SYSLVL),a	; we are in system state

	call	NVREAD		; read machine-specific settings
	call	INITKM		; init task manager
	call	MMUINI		; init MMU
	call	ININT		; init interrupt system
	call	INTOFF		; make sure interrupts are off

	ld	de,TMRINT	; timer interrupt routine = int vector 2
	ld	a,2
	call	SETVEC

	ld	hl,UPTIME
	ld	bc,5
	call	CLRMEM		; init uptime

  IF 0
	ld	de,GENPAR
	in0	a,(RAMLBR)
	add	a,16
	ld	b,a
	in0	a,(RAMUBR)
	inc	a
	sub	b
	ld	c,a		; use all remaining memory
	call	NEWPCB		; create GEN partition
	;jr	c,...
	set	PA.SYS,(ix+P.ATTR)
  ELSE
	ld	bc,GENPAR
	call	FNDPAR
	jr	c,nopar
	push	hl
	pop	ix
	in0	a,(RAMUBR)
	inc	a
	sub	a,(ix+P.BASE)
	ld	(ix+P.SIZE),a	; resize GEN partition to fit in available RAM
nopar:
  ENDIF

	ld	a,0C3h
	ld	(SYSRST),a	; for INIT task... in the future it will
	ld	hl,SYSENT	;  reside on its own bank
	ld	(SYSRST+1),hl

	ld	(0),a
	ld	hl,CHKTRP##
	ld	(1),hl		; setup illegal instruction trap for kernel

	; initialize physical devices

	call	INTON		; enable timer interrupts to service
	ei			;  any possible device timeouts

	ld	hl,PHYDEV
inidev:	ld	e,(hl)		; get DCB address into DE
	inc	hl
	ld	d,(hl)
	inc	hl
	ld	a,d
	or	e		; end of list?
	jr	z,done		; exit loop if yes
	push	de
	ld	hl,D.EPT
	add	hl,de
	ld	a,(hl)		; get address of dispatch table
	inc	hl
	ld	h,(hl)
	ld	l,a
	call	jphl		; call the driver's initialization entry point
	pop	hl
	jr	inidev

jphl:	jp	(hl)
	
done:	ld	de,'TT'
	ld	c,0		; 'TT0:' DE-C = physical
	ld	hl,'CO'
	ld	b,0		; 'CO0:' HL-B = logical (system console device)
	ld	a,N.GBL
	ld	ix,0
	call	ASSIGN

	ld	hl,0
	ld	(MCRTCB##),hl

	; start loader task - should have been installed and fixed in memory
	; by VMR

;;	ld	bc,LDRTDB+TD.NAME
;;	call	FNDTSK##
;;	jp	c,noldr
;;	ld	(LDRTCB),hl

	ld	hl,LDRTDB
	call	TRQST		; request loader
	jp	c,noldr
	ld	(LDRTCB),ix

	; start initialization task

	ld	a,(SYSBBR##)
	ld	(INITDB+TD.BANK),a
	ld	hl,INIT_E
	ld	de,INIT_S
	call	npages
	ld	(INITDB+TD.SIZE),a
	ld	hl,INITDB
	call	TSTART

	jp	GO		; start dispatcher

npages:	or	a
	sbc	hl,de
	ld	de,4095
	add	hl,de
	ld	a,h
	rrca
	rrca
	rrca
	rrca
	and	0Fh
	ret

uncfg:	call	TM_EPT##
	db	'RSX180 -- System not configured, stopping',0
	di
	halt

noldr:	call	TM_EPT##
	db	'RSX180 -- Loader not installed, stopping',0
	di
	halt

LDRTDB:	db	'LDR...'	; task name
	db	0,0,0,0,0,0	; task id
	db	0,0,0,0,0,0	; task partition
	dw	0		; address of command line block (not used)
	db	0,0,0,0		; pri, attr, user, grp (not used)
	db	'CO',0		; terminal device
	db	'LB',0		; load device
	dw	0,0,0		; starting block and size in blocks (not used)
	db	0,0		; bank and size (not used)
	dw	0,0,0,0		; start, end/incr, ept, initial SP (not used)
	dw	0,0		; addr and size of data blk to send (not used)

INITDB:	db	'INIT  '
	db	'V6.03 '
	db	'SYSPAR'
	dw	0
	db	200
	db	(1 SHL TA.PRV) OR (1 SHL TA.REM)
	db	1,1
	db	'CO',0
	db	'LB',0
	dw	0,0,0
	db	0,0
	dw	INIT_S,INIT_E,INIT_S,INIT_E
	dw	0,0

GENPAR:	db	'GEN   '

;-----------------------------------------------------------------------

	dseg

	public	IDDTBL

IDDTBL:	GENDEV			; device-driver table from SYSCONF.INC
	dw	0		; end of table marker

	end	START
